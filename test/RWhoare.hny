import synch;

def wait(s):
    call V &(mutex);
    call P s;
;
def signal(s):
    call V s;
    call P &(mutex);
;
def check():
    if (nwritersEntered == 0) and (nreadersWaiting > 0):
        call signal &(rsema);
    elif ((nreadersEntered + nwritersEntered) == 0) and (nwritersWaiting > 0):
        call signal &(wsema);
    ;
;
def acquire_rlock():
    call P &(mutex);
    if nwritersEntered > 0:
        nreadersWaiting = nreadersWaiting + 1;
        call wait &(rsema);
        nreadersWaiting = nreadersWaiting - 1;
    ;
    nreadersEntered = nreadersEntered + 1;
    call check();
    call V &(mutex);
;
def release_rlock():
    call P &(mutex);
    nreadersEntered = nreadersEntered - 1;
    call check();
    call V &(mutex);
;
def acquire_wlock():
    call P &(mutex);
    if (nreadersEntered + nwritersEntered) > 0:
        nwritersWaiting = nwritersWaiting + 1;
        call wait &(wsema);
        nwritersWaiting = nwritersWaiting - 1;
    ;
    nwritersEntered = nwritersEntered + 1;
    call check();
    call V &(mutex);
;
def release_wlock():
    call P &(mutex);
    nwritersEntered = nwritersEntered - 1;
    call check();
    call V &(mutex);
;
mutex = Semaphore(1); rsema = Semaphore(0); wsema = Semaphore(0);
nreadersEntered = 0; nreadersWaiting = 0;
nwritersEntered = 0; nwritersWaiting = 0;

def process():
    while choose({ False, True }):
        if choose({ .read, .write }) == .read:
            call acquire_rlock();
            @rcs: assert atLabel.wcs == dict{};
            call release_rlock();
        else:                       # .write
            call acquire_wlock();
            @wcs: assert (atLabel.wcs == dict{ nametag(): 1 }) and
                         (atLabel.rcs == dict{})
                  ;
            call release_wlock();
        ;
    ;
;
for i in 1..4:
    spawn process();
;
