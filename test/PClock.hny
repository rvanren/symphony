# busy waiting solution to producer/consumer bounded buffer just using a lock

import synch;

const N = 2;         # size of bounded buffer

def produce(item):
    var full = True;
    while full:
        call lock &(mylock);
        if cnt < N:
            full = False;
        else:
            assert cnt == N, cnt;
            call unlock &(mylock);
        ;
    ;
    @room:
        cnt = cnt + 1;
        # buf[myin] = choose({ 10, 20 });
        buf[myin] = item;
        myin = (myin % N) + 1;

    call unlock &(mylock);
;
def consume():
    var empty = True;
    while empty:
        call lock &(mylock);
        if cnt > 0:
            empty = False;
        else:
            assert cnt == 0, cnt;
            call unlock &(mylock);
        ;
    ;
    @avail:
        cnt = cnt - 1;
        result = buf[myout];
        myout = (myout % N) + 1;
    call unlock &(mylock);
;
def producer():
    while True:
        # call produce(choose({ 10, 20 }));
        call produce(1);
        @produced: pass;
    ;
;
def consumer():
    while True:
        call consume();
        @consumed: pass;
    ;
;
buf = dict{ 0 for x in 1..N };
myin = 1;
myout = 1;
cnt = 0;
mylock = Lock();

spawn producer(), 0;
spawn producer(), 0;
spawn consumer(), 1;
spawn consumer(), 1;
