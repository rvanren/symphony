def v(x):
    result = x

assert (v(1) + v(2) + v(3)) == 6, 1
assert (v([1,]) + v([2,]) + v([3,]) + v([])) == [1, 2, 3], 2
assert (v(2) * v(3)) == 6, 3
assert (v([1,]) * 3) == [1, 1, 1], (4, (v([1,]) * 3))
assert (v(1) | v(2) | v(3)) == 3, 5
assert (v({1, 2}) | v({2, 3}) | v({})) == {1, 2, 3}, 6
assert (v({1, 2, 3}) & v({2, 3, 4}) & v({3, 4, 5})) == {3}, 7
assert (v(1) - v(2)) == -1, 8
assert (v({1, 2, 4}) - v({0, 2, 3})) == {1, 4}, 9
assert v(2) in v({ 1, 2, 3 }), 10
assert v(0) not in v({ 1, 2, 3 }), 11
assert (v(3) // v(2)) == 1
assert abs(v(1)) == 1
assert abs(v(0)) == 0
assert abs(v(-1)) == 1
assert ~v(0) == -1
assert ~v(1) == -2
assert ~v(-1) == 0
assert (v(3) ** v(2)) == 9
assert (v(-2) ** v(3)) == -8
assert (v(2) << v(3)) == 16
assert (v(16) >> v(1)) == 8
assert (v({1, 2, 3}) ^ v({2, 3, 4}) ^ v({3, 4, 5})) == {1,3,5}
assert v(inf) > v(1)
assert -v(inf) < v(-1)
assert v(-inf) < v(-1), v(-inf)
assert v(True) in { True, (1,), (2,) }, 12
assert v(False) not in { 1 }, 13
assert { v(1):2, 1:1, 1:3, 1:1 } == { 1:3 }
assert ([v(1), 2, 3] | [2, 1]) == [2, 2, 3]
assert ([v(1), 2, 3] & [2, 1]) == [1, 1]
assert { i%2 for i in { 1, 2, 3 } } == { 0, 1 }
assert { v(1), 2, 3 } == { 3, 2, 1 }
assert { v(1), 2, 1 } == { 2, 1 }

# x = v(3) + v(False)
# x = all v([3, 4])
