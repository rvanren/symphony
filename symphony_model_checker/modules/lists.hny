# return s[b:e]
def subseq(s, b, e) returns result:
    result = [ s[x] for x in {b..e-1} ]

def append(s, e) returns result:
    result = s + [e,]

def head(s) returns result:
    result = s[0]

def tail(s) returns result:
    result = s
    del result[0]

# convert values of a dictionary into a list
def values(d) returns result:
    result = [ v for _:v in d ]

# like Python .items()
def items(d) returns result:
    result = [ (k, v) for k:v in d ]

# quicksort of a list
def qsort(a) returns sorted_list:
    if a == []:
        sorted_list = []
    else:
        let (pivot, rest) = head(a), tail(a)
        let lower = [ v for v in rest where v < pivot ]
        let higher = [ v for v in rest where v >= pivot ]:
            sorted_list = qsort(lower) + [pivot,] + qsort(higher)

# like Python index()
def index(d, e) returns i:
    i = 0
    while d[i] != e:
        i += 1

# like Python startswith (only defined for strings)
def startswith(d, prefix) returns result:
    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })

# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)
def foldl(d, f, z) returns result:
    result = z
    for e in d:
        result = f(result, e)

# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))
def foldr(d, f, z) returns result:
    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))

# Python functools reduce operator
def reduce(f, d, z) returns result:
    result = foldl(d, f, z)

# Return a permutation of set s
def permuted(s) returns perm:
    perm = []
    var c = s
    while c != {}:
        let e = choose c:
            perm += [ e, ]
            c -= { e }

# Return a list of elements satisfying the condition
def filter(cond, s) returns t:
    t = [ e for e in s where cond(e) ]

# Return a list of elements mapped by f
def map(f, s) returns t:
    t = [ f(e) for e in s ]
