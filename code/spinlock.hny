const N = 5

in_cs = 0
invariant in_cs in { 0, 1 }

shared = False
private = [ True, ] * N
invariant [x for x in [shared,] + private where not x] == [False,]

def swap(s, p):
    atomically !p, !s = !s, !p

def thread(self):
    while choose({ False, True }):
        # Enter critical section
        while private[self]:
            swap(?shared, ?private[self])

        atomically in_cs += 1
        assert not private[self]
        atomically in_cs -= 1

        # Leave critical section
        swap(?shared, ?private[self])

for i in {0..N-1}:
    spawn thread(i)
