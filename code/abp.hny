def net_send(pchan, msg):
    atomically:
        !pchan = msg if choose({ False, True }) else ()

def net_recv(pchan) returns msg:
    atomically:
        msg = !pchan
        !pchan = ()

def app_send(net, seq, payload):
    !seq = 1 - !seq
    let m = { .seq: !seq, .payload: payload }:
        var blocked = True
        while blocked:
            net_send(?net->s_chan, m)
            let response = net_recv(?net->r_chan):
                blocked = (response == ()) or (response.ack != !seq)
            
def app_recv(net, seq) returns payload:
    !seq = 1 - !seq
    var blocked = True
    while blocked:
        let m = net_recv(?net->s_chan):
            if m != ():
                net_send(?net->r_chan, { .ack: m.seq })
                if m.seq == !seq:
                    payload = m.payload
                    blocked = False
