# The file system consists of a superblock pointing to a linked list
# of free blocks, an array of inode blocks, and the remaining blocks.
# The remaining blocks are dynamic and can be of the following types:
#   - free: in the linked list of free blocks
#   - data: a data block
#   - indir: an indirect block, with pointers to other blocks
# An inode has a pointer to a direct block and a pointer to an indirect block,
# so the maximum file size is 1 + INDIR_PER_BLOCK.

#/ PREAMBLE

from synch import *             # shared queue for file server and lock for superblock
from rwlock import *            # read/write locks for inode blocks
from alloc import *             # malloc/free
from lists import subseq        # list slicing
import disk                     # reading and writing blocks

const N_BLOCKS = 10             # total number of disk blocks
const INODES_PER_BLOCK = 2      # number of inodes that fit in a block
const INDIR_PER_BLOCK  = 4      # number of block pointers per block

#/ INIT

# Initialize the file system by writing the superblock, the free list, and
# the i-node blocks,
def fs_init(d, n_inode_blocks):
    # Initialize the i-node blocks
    for i in { 1 .. n_inode_blocks }:
        disk.write(d, i, [ { .direct: None, .indir: None, .size: 0 }, ] * INODES_PER_BLOCK)

    # Free the data blocks
    var free_list = None
    for i in { n_inode_blocks + 1 .. N_BLOCKS - 1 }:
        disk.write(d, i, free_list)
        free_list = i

    # Write the superblock
    disk.write(d, 0, { .n_inode_blocks: n_inode_blocks, .free_list: free_list })

#/ UTILS

# Write to the disk
def do_write(fs_state, bno, block):
    disk.write(fs_state->disk, bno, block)

# Allocate a disk block.
def fs_alloc(fs_state) returns bno:
    acquire(?fs_state->free_lock)
    var super = disk.read(fs_state->disk, 0)
    bno = super.free_list
    if bno != None:
        super.free_list = disk.read(fs_state->disk, bno)
        do_write(fs_state, 0, super)
    release(?fs_state->free_lock)

# Free block bno.
def fs_free(fs_state, bno):
    acquire(?fs_state->free_lock)
    var super = disk.read(fs_state->disk, 0)
    do_write(fs_state, bno, super.free_list)
    super.free_list = bno
    do_write(fs_state, 0, super)
    release(?fs_state->free_lock)

# Read inode ino in block ib.
def fs_get_inode(fs_state, ib, ino) returns inode:
    let inode_block = disk.read(fs_state->disk, 1 + ib):
        inode = inode_block[ino % INODES_PER_BLOCK]

# Write inode ino in block ib.
def fs_put_inode(fs_state, ib, ino, inode):
    var inode_block = disk.read(fs_state->disk, 1 + ib)
    inode_block[ino % INODES_PER_BLOCK] = inode
    do_write(fs_state, 1 + ib, inode_block)

#/ QUERY

# Handle a read request.  A read lock on i-node block ib has been acquired.
def fs_read_request(fs_state, req, ib) returns result:
    # Read the inode block and extract the inode
    let inode = fs_get_inode(fs_state, ib, req.ino):
        # Read the direct block.  Return None if there is no direct block.
        if req.offset == 0:
            if inode.direct == None:
                result = None
            else:
                result = disk.read(fs_state->disk, inode.direct)

        # Read indirectly.  If there is no indirect block return None
        elif inode.indir == None:
            result = None

        # Read the indirect block and get the pointer to the data block,
        # which may be None.
        else:
            let indir = disk.read(fs_state->disk, inode.indir):
                if indir[req.offset - 1] == None:
                    result = None
                else:
                    result = disk.read(fs_state->disk, indir[req.offset - 1])

#/ UPDATE

# Handle an update request.  A write lock on i-node block ib has been acquired.
def fs_update_request(fs_state, id, req, ib):
    var inode = fs_get_inode(fs_state, ib, req.ino)
    if req.type == "write":
        if req.offset == 0:
            if inode.direct == None:
                inode.direct = fs_alloc(fs_state)
                inode.size = max(inode.size, 1)
                fs_put_inode(fs_state, ib, req.ino, inode)
            do_write(fs_state, inode.direct, req.data)
        else:
            if inode.indir == None:
                inode.indir = fs_alloc(fs_state)
                inode.size = max(inode.size, req.offset + 1)
                fs_put_inode(fs_state, ib, req.ino, inode)
                let bno = fs_alloc(fs_state)
                let indir = [ bno if i == (req.offset - 1) else None
                                for i in { 0 .. INDIR_PER_BLOCK - 1 } ]:
                    do_write(fs_state, bno, req.data)
                    do_write(fs_state, inode.indir, indir)
            else:
                var indir = disk.read(fs_state->disk, inode.indir)
                if indir[req.offset - 1] == None:
                    indir[req.offset - 1] = fs_alloc(fs_state)
                    do_write(fs_state, inode.indir, indir)
                do_write(fs_state, indir[req.offset - 1], req.data)
                if inode.size <= req.offset:
                    inode.size = req.offset + 1
                    fs_put_inode(fs_state, ib, req.ino, inode)
    else:
        assert req.type == "delete"
        if inode.direct != None:
            fs_free(fs_state, inode.direct)
        if inode.indir != None:
            let indir = disk.read(fs_state->disk, inode.indir):
                for bno in indir:
                    if bno != None:
                        fs_free(fs_state, bno)
        inode.direct = inode.indir = None
        inode.size = 0
        fs_put_inode(fs_state, ib, req.ino, inode)

#/ WORKER

# A worker thread handles client requests
def fs_worker(fs_state_init, id):
    var fs_state = fs_state_init
    while True:
        let req = get(fs_state->req_q)
        let ib = req.ino / INODES_PER_BLOCK:
            if req.type in { "write", "delete" }:
                write_acquire(?fs_state->ib_locks[ib])
                fs_update_request(fs_state, id, req, ib)
                write_release(?fs_state->ib_locks[ib])
                put(req.q, "ok")
            else:
                assert req.type == "read"
                read_acquire(?fs_state->ib_locks[ib])
                let response = fs_read_request(fs_state, req, ib):
                    read_release(?fs_state->ib_locks[ib])
                    put(req.q, response)

#/ INTERFACE

def File(n_files) returns req_q:
    req_q = malloc(Queue())
    let n_inode_blocks = (n_files + (INODES_PER_BLOCK - 1)) / INODES_PER_BLOCK
    let n_workers = 2
    let d = disk.new(N_BLOCKS):
        # Initialize the file system on disk
        fs_init(d, n_inode_blocks)

        # Allocate the in-memory shared state of the file server
        let fs_state = malloc({ .next: None,
                .disk: d, .req_q: req_q, .free_lock: Lock(),
                .n_inode_blocks: n_inode_blocks,
                .ib_locks: [ RWlock(), ] * n_inode_blocks }):

            # Start worker threads to handle client requests
            for i in { 1 .. n_workers }:
                spawn eternal fs_worker(fs_state, i)

def read(req_q, ino, offset) returns result:
    let res_q = malloc(Queue()):
        put(req_q, { .type: "read", .ino: ino, .offset: offset, .q: res_q })
        result = get(res_q)
        free(res_q)

def write(req_q, ino, offset, data) returns result:
    let res_q = malloc(Queue()):
        put(req_q, { .type: "write", .ino: ino, .offset: offset, .data: data, .q: res_q })
        result = get(res_q)
        free(res_q)

def delete(req_q, ino) returns result:
    let res_q = malloc(Queue()):
        put(req_q, { .type: "delete", .ino: ino, .q: res_q })
        result = get(res_q)
        free(res_q)
