const sendHist = lambda(): { ?do_sendHist(p, q)
    for p in {1..NREPLICAS}
      where not replicas[p].crashed
    for q in {1..NREPLICAS}
      where is_successor(p, q) and (replicas[p].hist not in replicas[q].received)
  } end

def do_gotHist(self, hist):
    replicas[self].hist = hist

const gotHist = lambda(): { ?do_gotHist(p, hist)
    for p in {1..NREPLICAS} where not replicas[p].crashed
    for hist in replicas[p].received where (len(replicas[p].hist) < len(hist))
                        and lists.startswith(hist, replicas[p].hist) } end

def do_deliver(self):
    print(self, replicas[self].hist[replicas[self].delivered])
    replicas[self].delivered += 1

const deliver = lambda(): { ?do_deliver(p)
    for p in {1..NREPLICAS} where not replicas[p].crashed and
        is_tail(p) and (len(replicas[p].hist) > replicas[p].delivered) } end

def do_crash(self):
    replicas[self].crashed = True

const crash = lambda(): { ?do_crash(p)
    for p in {1..NREPLICAS}
        where not replicas[p].crashed and not replicas[p].immortal } end

def do_detect(self, p):
    replicas[self].config -= { p }

const detect = lambda(): { ?do_detect(p, q)
    for p in {1..NREPLICAS} where not replicas[p].crashed
    for q in {1..NREPLICAS} where replicas[q].crashed and
                (q in replicas[p].config) } end

action.explore({sendOperation, gotOperation, sendHist,
                    gotHist, deliver, crash, detect})
