import lists, action

const NREPLICAS = 3
const NOPS = 2

# Global state
let immortal = choose {1..NREPLICAS}:
    replicas = { p: { .immortal: immortal == p, .crashed: False,
                .requests: {}, .hist: [], .config: {1..NREPLICAS},
                .received: {}, .delivered: 0 } for p in {1..NREPLICAS} }
clients = { c: { .sent_request: False } for c in {1..NOPS} }

const is_head = lambda(p): p == min(replicas[p].config) end
const is_tail = lambda(p): p == max(replicas[p].config) end

def is_successor(self, p) returns result:
    let succ = { q for q in replicas[self].config where q > self }:
        result = False if succ == {} else (p == min(succ))

def do_sendOperation(c):
    print(c)
    clients[c].sent_request = True
    for p in {1..NREPLICAS}:
        replicas[p].requests |= { c }

const sendOperation = lambda(): { ?do_sendOperation(c)
    for c in {1..NOPS} where not clients[c].sent_request } end

def do_gotOperation(self, op):
    replicas[self].hist += [op,]

const gotOperation = lambda(): { ?do_gotOperation(p, op)
    for p in {1..NREPLICAS}
      where not replicas[p].crashed and is_head(p)
    for op in replicas[p].requests
      where op not in replicas[p].hist } end

def do_sendHist(self, p):
    replicas[p].received |= { replicas[self].hist }
